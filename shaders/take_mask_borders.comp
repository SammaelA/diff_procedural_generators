#version 460

layout( local_size_x = 512, local_size_y = 1) in;

layout(std430, binding=1) buffer min_max_coords_buf
{
    int arr[];
};

uniform sampler2D mask;
uniform vec2 size;
shared int t[4] = {-1, -1, -1, -1};
void main()
{
    int count = int(ceil(size.x / 512));
    int a = 0, b = 0;
    for (uint i = (gl_LocalInvocationID.x * count); i < (gl_LocalInvocationID.x + 1) * count && i < size.x; i = i + 1)
    {
        a = 0;
        b = 0;
        for (int j = 0; j < size.y; j = j + 1)
        {
            if (a == 0 && texture(mask, vec2(i / size.x, j / size.y)).r > 0)
            {
                a = 1;
                atomicMax(t[2], int(size.y) - j - 1);
            }
            if (b == 0 && texture(mask, vec2(i / size.x, 1 - j / size.y)).r > 0)
            {
                b = 1;
                
                atomicMax(t[3], int(size.y) - j - 1);
            }
            if (a != 0 && b != 0)
            {
                break;
            }
        }
    }
    count = int(ceil(size.y / 512));
    for (uint i = gl_LocalInvocationID.x * count; i < min((gl_LocalInvocationID.x + 1) * count, size.y); i = i + 1)
    {
        a = 0;
        b = 0;
        for (int j = 0; j < size.x; j = j + 1)
        {
            if (a == 0 && texture(mask, vec2(j / size.x, i / size.y)).r > 0)
            {
                a = 1;
                atomicMax(t[0], int(size.x) - j - 1);
            }
            if (b == 0 && texture(mask, vec2(1 - j / size.x, i / size.y)).r > 0)
            {
                b = 1;
                atomicMax(t[1], int(size.x) - j - 1);
            }
            if (a != 0 && b != 0)
            {
                break;
            }
        }
    }
    barrier();
    if (gl_LocalInvocationID.x == 0)
    {
        arr[0] = int(size.x) - t[0] - 1;
        arr[1] = t[1];
        arr[2] = int(size.y) - t[2] - 1;
        arr[3] = t[3];
    }
    memoryBarrierShared();
    barrier();
}
