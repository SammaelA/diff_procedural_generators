#version 430
#define THREADS 128
layout( local_size_x = THREADS ) in;

struct CellInfo
{
    uint lod_from;
    uint lod_to;
    uint pad1;
    uint pad2;
};
struct LodData
{
    vec2 min_max;
    vec2 offset;
};
layout(std140, binding=0) readonly buffer _LodData
{
    LodData lodData[];
};
struct TypeData
{
    uint offset;
    uint pad1,pad2,pad3;
};
layout(std140, binding=1) readonly buffer _TypeData
{
    TypeData typeData[];
};
struct InstanceData
{
    vec4 center_self;
    vec4 center_par;
    mat4 projection_camera;
};
layout(std140, binding=3) readonly buffer _InstanceData
{
    InstanceData instances[];
};
struct ModelData
{
    uint LOD;
    uint type;
    uint vertexes;
    uint first_index;
    uvec2 interval;
    uint culling;
    uint pad;
    vec4 x_s;
    vec4 y_s;
    vec4 z_s;
};
layout(std140, binding=4) readonly buffer _ModelData
{
    ModelData modelData[];
};
struct currentInstancesData
{
    uint index;
    uint pad;
    float mn;
    float mx;
};
layout(std140, binding=5) writeonly buffer _curInsts
{
    currentInstancesData curInsts[];
};

layout(std140, binding=6) writeonly buffer _curModels
{
    uvec4 curModels[];
};
struct DrawElementsIndirectCommand
{
    uint count;         // Num elements (vertices)
    uint instanceCount; // Number of instances to draw (a.k.a primcount)
    uint firstIndex;    // Specifies a byte offset (cast to a pointer type) into the buffer bound to GL_ELEMENT_ARRAY_BUFFER to start reading indices from.
    uint baseVertex;    // Specifies a constant that should be added to each element of indicesâ€‹ when chosing elements from the enabled vertex arrays.
    uint baseInstance;  // Specifies the base instance for use in fetching instanced vertex attributes.
    uint pad1,pad2,pad3;
};
layout(std140, binding=7) writeonly buffer _DrawElementsIndirectCommand
{
    DrawElementsIndirectCommand cmds[];
};

layout(std140, binding=8) buffer _curTypes
{
    uvec4 curTypes[];
};
layout(std140, binding=10) readonly buffer _cells
{
    CellInfo cells[];
};

uniform uint lods_count;
uniform uint objects_count;
uniform vec3 camera_pos;
uniform float trans;
uniform mat4 projectionCamera;
uniform int forced_lod;
void main()
{
    //for (uint i=0; i<THREADS; i++)
    //{
    uint object_id = THREADS*gl_WorkGroupID.x + gl_LocalInvocationIndex;
    if (object_id >= objects_count)
        return;
    object_id = objects_count - object_id - 1;
    uvec2 interval = modelData[object_id].interval;
    int k = int(modelData[object_id].LOD);

    vec2 min_max = lodData[k].min_max;

    uint cnt = (interval.y - interval.x)/ THREADS + 1;
    uint st, en;
    st = interval.x;
    en = interval.y;
    uint inst_num = 0;
    for (uint i = st; i < en; i++)
    {
        int c = int(instances[i].center_self.w);
        if ((forced_lod == -1) && (c >= 0) && (cells[c].lod_from > k || cells[c].lod_to < k))
        {
            continue;   
        }
        int instance_visible = 0;
        vec2 a_mult = vec2(10,0);
        if (forced_lod != -1)
        {
            instance_visible = int(k == forced_lod);
        }
        else
        {
            float l1 = length(instances[i].center_par.xz - camera_pos.xz);
            float l2 = length(instances[i].center_self.xz - camera_pos.xz);
            float mx_dist = min_max.y - l1;
            float mn_dist = l2 - min_max.x;



            if ((mx_dist >= -trans) && (mn_dist >= -trans))//test if we need this to draw this instance
            {
                if (mn_dist < trans)
                {
                    a_mult = vec2(0.5*(mn_dist/trans + 1), l2);
                }
                else if (mx_dist < trans)
                {
                    a_mult = vec2(0.5*(mx_dist/trans + 1), -l1);
                }
                else
                {
                    a_mult = vec2(10,0);
                }
                instance_visible = 1;
            }
            if (instance_visible > 0 && modelData[object_id].culling > 0)
            {
                instance_visible = 1;

                vec3 pos = vec3(modelData[object_id].x_s.x,modelData[object_id].y_s.x,modelData[object_id].z_s.x);
                vec3 a = vec3(modelData[object_id].x_s.y,modelData[object_id].y_s.y,modelData[object_id].z_s.y);
                vec3 b = vec3(modelData[object_id].x_s.z,modelData[object_id].y_s.z,modelData[object_id].z_s.z);
                vec3 c = vec3(modelData[object_id].x_s.w,modelData[object_id].y_s.w,modelData[object_id].z_s.w);
                
                vec4 bbv[8];
                bbv[0] = vec4(pos, 1);
                bbv[1] = vec4(pos+a+b+c, 1);
                bbv[2] = vec4(pos+a+b, 1);
                bbv[3] = vec4(pos+b+c, 1);

                bbv[4] = vec4(pos+a, 1);
                bbv[5] = vec4(pos+b, 1);
                bbv[6] = vec4(pos+c, 1);
                bbv[7] = vec4(pos+a+c, 1);
                for (int k=0;k<8;k++)
                {
                    bbv[k] = projectionCamera*instances[i].projection_camera*bbv[k];
                    bbv[k].xyz /= bbv[k].w;
                }
                if (bbv[0].x > 1 && bbv[1].x > 1 && bbv[2].x > 1 && bbv[3].x > 1 &&
                    bbv[4].x > 1 && bbv[5].x > 1 && bbv[6].x > 1 && bbv[7].x > 1)
                {
                    instance_visible = 0;
                }
                else if (bbv[0].y > 1 && bbv[1].y > 1 && bbv[2].y > 1 && bbv[3].y > 1 &&
                    bbv[4].y > 1 && bbv[5].y > 1 && bbv[6].y > 1 && bbv[7].y > 1)
                {
                    instance_visible = 0;
                }
                else if (bbv[0].z > 1 && bbv[1].z > 1 && bbv[2].z > 1 && bbv[3].z > 1 &&
                    bbv[4].z > 1 && bbv[5].z > 1 && bbv[6].z > 1 && bbv[7].z > 1)
                {
                    instance_visible = 0;
                }
                else if (bbv[0].x < -1 && bbv[1].x < -1 && bbv[2].x < -1 && bbv[3].x < -1 &&
                    bbv[4].x < -1 && bbv[5].x < -1 && bbv[6].x < -1 && bbv[7].x < -1)
                {
                    instance_visible = 0;
                }
                else if (bbv[0].y < -1 && bbv[1].y < -1 && bbv[2].y < -1 && bbv[3].y < -1 &&
                    bbv[4].y < -1 && bbv[5].y < -1 && bbv[6].y < -1 && bbv[7].y < -1)
                {
                    instance_visible = 0;
                }
                else if (bbv[0].z < -1 && bbv[1].z < -1 && bbv[2].z < -1 && bbv[3].z < -1 &&
                    bbv[4].z < -1 && bbv[5].z < -1 && bbv[6].z < -1 && bbv[7].z < -1)
                {
                    instance_visible = 0;
                }
            }
        }
        if (instance_visible > 0)
        {
            curInsts[st + inst_num].index = i;
            curInsts[st + inst_num].mn = a_mult.x;
            curInsts[st + inst_num].mx = a_mult.y;
            inst_num++;
        }
    }
    if (inst_num > 0)
    {
        uint type = modelData[object_id].type;
        uint cmd_n = typeData[type].offset + atomicAdd(curTypes[type].x,1);

        cmds[cmd_n].count = modelData[object_id].vertexes;
        cmds[cmd_n].instanceCount = inst_num;
        cmds[cmd_n].firstIndex = modelData[object_id].first_index;
        cmds[cmd_n].baseVertex = 0;
        cmds[cmd_n].baseInstance = 0;

        curModels[cmd_n].x = st;
        curModels[cmd_n].y = object_id;
    }

}
